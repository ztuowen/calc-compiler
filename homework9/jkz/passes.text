*** IR Dump After Module Verifier ***
define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %29, %entry
  %7 = phi i64 [ %0, %entry ], [ %21, %29 ]
  %8 = phi i64 [ %1, %entry ], [ %26, %29 ]
  %9 = phi i64 [ 0, %entry ], [ %9, %29 ]
  %10 = phi i64 [ 0, %entry ], [ %10, %29 ]
  %11 = phi i64 [ 0, %entry ], [ %11, %29 ]
  %12 = phi i64 [ 0, %entry ], [ %12, %29 ]
  %13 = phi i64 [ 0, %entry ], [ %13, %29 ]
  %14 = phi i64 [ 0, %entry ], [ %14, %29 ]
  %15 = phi i64 [ 0, %entry ], [ %15, %29 ]
  %16 = phi i64 [ 0, %entry ], [ %16, %29 ]
  %17 = phi i64 [ 0, %entry ], [ %21, %29 ]
  %18 = icmp ne i64 %8, 1
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %6
  %20 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  br i1 %22, label %28, label %24

; <label>:23:                                     ; preds = %6
  ret i64 %17

; <label>:24:                                     ; preds = %19
  %25 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  br i1 %27, label %30, label %29

; <label>:28:                                     ; preds = %19
  call void @overflow_fail(i32 120)
  unreachable

; <label>:29:                                     ; preds = %24
  br label %6

; <label>:30:                                     ; preds = %24
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %24, %entry
  %7 = phi i64 [ %0, %entry ], [ %21, %24 ]
  %8 = phi i64 [ %1, %entry ], [ %26, %24 ]
  %9 = phi i64 [ 0, %entry ], [ %9, %24 ]
  %10 = phi i64 [ 0, %entry ], [ %10, %24 ]
  %11 = phi i64 [ 0, %entry ], [ %11, %24 ]
  %12 = phi i64 [ 0, %entry ], [ %12, %24 ]
  %13 = phi i64 [ 0, %entry ], [ %13, %24 ]
  %14 = phi i64 [ 0, %entry ], [ %14, %24 ]
  %15 = phi i64 [ 0, %entry ], [ %15, %24 ]
  %16 = phi i64 [ 0, %entry ], [ %16, %24 ]
  %17 = phi i64 [ 0, %entry ], [ %21, %24 ]
  %18 = icmp ne i64 %8, 1
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %6
  %20 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  br i1 %22, label %28, label %24

; <label>:23:                                     ; preds = %6
  ret i64 %17

; <label>:24:                                     ; preds = %19
  %25 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  br i1 %27, label %29, label %6

; <label>:28:                                     ; preds = %19
  call void @overflow_fail(i32 120)
  unreachable

; <label>:29:                                     ; preds = %24
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After SROA ***
define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %24, %entry
  %7 = phi i64 [ %0, %entry ], [ %21, %24 ]
  %8 = phi i64 [ %1, %entry ], [ %26, %24 ]
  %9 = phi i64 [ 0, %entry ], [ %9, %24 ]
  %10 = phi i64 [ 0, %entry ], [ %10, %24 ]
  %11 = phi i64 [ 0, %entry ], [ %11, %24 ]
  %12 = phi i64 [ 0, %entry ], [ %12, %24 ]
  %13 = phi i64 [ 0, %entry ], [ %13, %24 ]
  %14 = phi i64 [ 0, %entry ], [ %14, %24 ]
  %15 = phi i64 [ 0, %entry ], [ %15, %24 ]
  %16 = phi i64 [ 0, %entry ], [ %16, %24 ]
  %17 = phi i64 [ 0, %entry ], [ %21, %24 ]
  %18 = icmp ne i64 %8, 1
  br i1 %18, label %19, label %23

; <label>:19:                                     ; preds = %6
  %20 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %21 = extractvalue { i64, i1 } %20, 0
  %22 = extractvalue { i64, i1 } %20, 1
  br i1 %22, label %28, label %24

; <label>:23:                                     ; preds = %6
  ret i64 %17

; <label>:24:                                     ; preds = %19
  %25 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  br i1 %27, label %29, label %6

; <label>:28:                                     ; preds = %19
  call void @overflow_fail(i32 120)
  unreachable

; <label>:29:                                     ; preds = %24
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Early CSE ***
define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Lower 'expect' Intrinsics ***
define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Module Verifier ***
define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After SROA ***
define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Early CSE ***
define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Lower 'expect' Intrinsics ***
define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Module Verifier ***
define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After SROA ***
define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Early CSE ***
define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Lower 'expect' Intrinsics ***
define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Force set function attributes ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Infer set function attributes ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Global Variable Optimizer ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Promote Memory to Register ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Promote Memory to Register ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Promote Memory to Register ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Dead Argument Elimination ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp ne i64 %8, 1
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After PGOIndirectCallPromotion ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0
*** IR Dump After Deduce function attributes ***
; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0
*** IR Dump After Remove unused exception handling info ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Function Integration/Inlining ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Deduce function attributes ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After SROA ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Early CSE ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Speculatively execute instructions if target has divergent branches ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Jump Threading ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Value Propagation ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Tail Call Elimination ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Reassociate expressions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Rotate Loops ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Loop Invariant Code Motion ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Unswitch loops ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Induction Variable Simplification ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Recognize loop idioms ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Delete dead loops ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Unroll loops ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After MergedLoadStoreMotion ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Global Value Numbering ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After MemCpy Optimization ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Sparse Conditional Constant Propagation ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Jump Threading ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Value Propagation ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Dead Store Elimination ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop Invariant Code Motion ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Aggressive Dead Code Elimination ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1
*** IR Dump After Remove unused exception handling info ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Function Integration/Inlining ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Deduce function attributes ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After SROA ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Early CSE ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Speculatively execute instructions if target has divergent branches ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Jump Threading ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Value Propagation ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Tail Call Elimination ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Reassociate expressions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After MergedLoadStoreMotion ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Global Value Numbering ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After MemCpy Optimization ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Sparse Conditional Constant Propagation ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Jump Threading ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Value Propagation ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Dead Store Elimination ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Aggressive Dead Code Elimination ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Remove unused exception handling info ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Function Integration/Inlining ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Deduce function attributes ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After SROA ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Early CSE ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Speculatively execute instructions if target has divergent branches ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Jump Threading ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Value Propagation ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Tail Call Elimination ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Reassociate expressions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After MergedLoadStoreMotion ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Global Value Numbering ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After MemCpy Optimization ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Sparse Conditional Constant Propagation ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Jump Threading ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Value Propagation ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Dead Store Elimination ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Aggressive Dead Code Elimination ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Eliminate Available Externally Globals ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Deduce function attributes in RPO ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Float to int ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Rotate Loops ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Loop Distribition ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop Vectorization ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop Load Elimination ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After SLP Vectorizer ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Unroll loops ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Combine redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  %.lcssa = phi i64 [ %9, %6 ]
  ret i64 %.lcssa

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Loop Invariant Code Motion ***
; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6
*** IR Dump After Remove redundant instructions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Alignment from assumptions ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Float to int ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop Distribition ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop Vectorization ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop Load Elimination ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After SLP Vectorizer ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Remove redundant instructions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Alignment from assumptions ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Float to int ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop Distribition ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop Vectorization ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop Load Elimination ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Demanded bits analysis ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After SLP Vectorizer ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Simplify the CFG ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Combine redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Canonicalize natural loops ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Loop-Closed SSA Form Pass ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Remove redundant instructions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Alignment from assumptions ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Dead Global Elimination ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Merge Duplicate Global Constants ***; ModuleID = 'power.ll'
source_filename = "calc"
target triple = "x86_64-unknown-linux-gnu"

define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}

; Function Attrs: noreturn
declare void @overflow_fail(i32) local_unnamed_addr #0

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #1

define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
*** IR Dump After Module Verifier ***
define i64 @f(i64, i64, i64, i64, i64, i64) local_unnamed_addr {
entry:
  br label %6

; <label>:6:                                      ; preds = %16, %entry
  %7 = phi i64 [ %0, %entry ], [ %13, %16 ]
  %8 = phi i64 [ %1, %entry ], [ %18, %16 ]
  %9 = phi i64 [ 0, %entry ], [ %13, %16 ]
  %10 = icmp eq i64 %8, 1
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %6
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %7, i64 %0)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %20, label %16

; <label>:15:                                     ; preds = %6
  ret i64 %9

; <label>:16:                                     ; preds = %11
  %17 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %8, i64 1)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %21, label %6

; <label>:20:                                     ; preds = %11
  tail call void @overflow_fail(i32 120)
  unreachable

; <label>:21:                                     ; preds = %16
  tail call void @overflow_fail(i32 167)
  unreachable
}
*** IR Dump After Module Verifier ***
define i64 @_strap_div(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  %5 = icmp eq i64 %0, -9223372036854775808
  %6 = icmp eq i64 %1, -1
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %3
  %10 = sdiv i64 %0, %1
  ret i64 %10

; <label>:11:                                     ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
*** IR Dump After Module Verifier ***
define i64 @_strap_mod(i64, i64, i32) local_unnamed_addr {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = srem i64 %0, %1
  ret i64 %6

; <label>:7:                                      ; preds = %3
  tail call void @overflow_fail(i32 %2)
  unreachable
}
